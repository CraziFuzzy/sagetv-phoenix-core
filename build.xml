<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="package" name="Phoenix" xmlns:ivy="antlib:org.apache.ivy.ant">
	<tstamp/>
	
	<property environment="env" />

	<!-- Put Host specific properties here, ie sage path, bmt path, etc -->
	<property file="${user.home}/AntCommon/build.properties" />
	
	<!-- Put Host specific properties here, ie sage path, bmt path, etc -->
	<property file="build.properties" />
	
	<!-- sage.lib.dir should be defined in the build.properties -->
	<!-- <property name="sage.lib.dir"/> -->
	<!-- bmt.lib.dir should be defined in the build.properties -->
	<!-- <property name="bmt.lib.dir"/> -->
	<!-- bmt.core.lib should be defined in the build.properties -->
	<!-- <property name="bmt.core.lib"/> -->
	<!-- Configure path to GWT SDK  in the build .properties -->
	<!-- <property name="gwt.sdk" location="" /> -->
	
	<!-- we are using the build.properties for the google code stuff -->
	<property name="gc.upload.settings" value="build.properties"/>

	<property name="src.dir" location="src/main/java" />
	<property name="target" location="target" />
	<property name="build.dir" location="${target}/build" />
	<property name="dist.dir" location="${target}/dist" />
	<property name="tools.dir" location="${build.dir}/tools/" />

	<property name="name" value="phoenix" />
	<property name="version" value="2.5.13" />
	<property name="jarname" value="${name}.jar" />
	
	<!--<property name="createJAVADOC" value="true"/> -->
	<property name="requiredSageVersion" value="7.1.9"/>
	
	<property name="sagex-api.zip" value="http://customsagetv.googlecode.com/files/sagex-api-7.1.9.15.zip"/>

	<path id="project.class.path">
		<pathelement location="target/build/classes" />
		<fileset dir="lib" includes="*.jar" excludes="**-sources**,**-javadoc**"/>
		<pathelement path="${sage.jar}"/>
	</path>

	<!-- BEGIN IVY DEPENDENDCY MANAGER -->
	<property name="ivy.install.version" value="2.4.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />

	<!-- comment out to allow IVY to fetch dependencies -->
	<!-- <property name="offline" value="true" /> -->

	<target name="download-ivy" unless="offline">
		<mkdir dir="${ivy.jar.dir}" />
		
		<delete dir="${ivy.jar.dir}" includes="ivy*.jar" failonerror="false" verbose="true"/>
		
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://www.apache.org/dist/ant/ivy/${ivy.install.version}/apache-ivy-${ivy.install.version}-bin.zip" dest="${ivy.jar.dir}/ivy.zip" usetimestamp="true" />
		<unzip dest="${ivy.jar.dir}" src="${ivy.jar.dir}/ivy.zip">
			<patternset includes="**/ivy*.jar"/>
			<mapper type="flatten"/>
		</unzip>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
		<fileset dir="${ivy.jar.dir}" includes="*.jar" />

		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="resolve" description="retrieve dependencies with ivy">
        <ivy:retrieve />
		
		<!-- get sagex-api -->
		<get src="${sagex-api.zip}" dest="lib/sagex.zip" usetimestamp="true" />
		<unzip dest="lib" src="lib/sagex.zip">
			<patternset includes="*.jar"/>
			<mapper type="flatten"/>
		</unzip>
		
		<!-- get google weather -->
		<get src="http://download.sage.tv/plugins/Opus4/GoogleWeather/GoogleWeather_2_0_1.zip" dest="lib/googleweather.zip" usetimestamp="true" />
		<unzip dest="lib" src="lib/googleweather.zip">
			<patternset includes="*.jar"/>
			<mapper type="flatten"/>
		</unzip>

		<!-- get nielm's sageimdb jar -->
		<get src="http://download.sage.tv/plugins/JREkiwi/nielm_sageimdb/nielm_sageimdb_1.8.5.zip" dest="lib/sageimdb.zip" usetimestamp="true" />
		<unzip dest="lib" src="lib/sageimdb.zip">
			<patternset includes="*.jar"/>
			<mapper type="flatten"/>
		</unzip>

		<get src="http://downloads.sourceforge.net/project/sageplugins/sageutls/1.4.2/plugin/nielm-sageutls-jars-1.4.2.zip?use_mirror=" dest="lib/sageutils.zip" usetimestamp="true" />
		<unzip dest="lib" src="lib/sageutils.zip">
			<patternset includes="*.jar"/>
			<mapper type="flatten"/>
		</unzip>

		<!-- The Move DB Support Jar -->
		<get src="https://sagephoenix.googlecode.com/files/themoviedb-3.0.1.zip" dest="lib/themoviedb.zip" usetimestamp="true" />
		<unzip dest="lib" src="lib/themoviedb.zip">
			<patternset includes="*.jar"/>
			<mapper type="flatten"/>
		</unzip>

		<!-- get cling (upnp support) -->
		<get src="http://4thline.org/m2/org/seamless/seamless-util/1.0-SNAPSHOT/seamless-util-1.0-20111129.053811-2.jar" dest="lib/seamless-util-1.0.jar" usetimestamp="true"/>
		<get src="http://4thline.org/m2/org/seamless/seamless-http/1.0-SNAPSHOT/seamless-http-1.0-20111129.053936-2.jar" dest="lib/seamless-http-1.0.jar" usetimestamp="true"/>
		<get src="http://4thline.org/m2/org/seamless/seamless-xml/1.0-SNAPSHOT/seamless-xml-1.0-20111129.053837-2.jar" dest="lib/seamless-xml-1.0.jar" usetimestamp="true"/>
		<get src="http://4thline.org/m2/org/fourthline/cling/cling-core/2.0-SNAPSHOT/cling-core-2.0-20111017.171724-1.jar" dest="lib/cling-core-2.0.jar" usetimestamp="true"/>
		<get src="http://4thline.org/m2/org/fourthline/cling/cling-support/2.0-SNAPSHOT/cling-support-2.0-20111017.171832-1.jar" dest="lib/cling-support-2.0.jar" usetimestamp="true"/>

    </target>
	<!-- END IVY DEPENDENDCY MANAGER -->

	<target name="configure" description="Configures the eclipse classpath" depends="clean,init-ivy,resolve">
		<script language="javascript"><![CDATA[
			importClass(java.io.File);
			importClass(java.io.FileReader);
			importClass(java.io.FileWriter);
			importClass(javax.swing.filechooser.FileNameExtensionFilter);
			importClass(java.io.FileWriter);
			importClass(javax.swing.JFileChooser);
			importClass(javax.swing.JOptionPane);
			importClass(java.util.Properties);
			importClass(java.lang.System);
			
			function selectFile(question, srcFile) {
				var ch = new JFileChooser();
				ch.setFileSelectionMode(JFileChooser.FILES_ONLY);
				ch.setDialogType(JFileChooser.OPEN_DIALOG);
				ch.setDialogTitle(question);
				ch.setApproveButtonText('Select JAR');
			
				if (srcFile) {
					var f = new File(srcFile);
					if (f.getParentFile()!=null) {
						ch.setCurrentDirectory(f.getParentFile());
					}
					if (f.exists()) {
						ch.setSelectedFile(f);
					}
				}
			
				var filter = new FileNameExtensionFilter("JAR Files", ["jar"]);
				ch.addChoosableFileFilter(filter);
				ch.setFileFilter(filter);
				var val = ch.showOpenDialog(null);
				if(val == JFileChooser.APPROVE_OPTION) {
					return ch.getSelectedFile();
				}
				return null;
			}
			
			function alert(msg, title) {
			    if (System.getProperty('configure.noui',null)!=null) {
			        System.out.println("PHOENIX: " + msg);
				} else {
					JOptionPane.showMessageDialog(null, msg, (title)?title:"Message", JOptionPane.INFORMATION_MESSAGE);
				}
			}
			
			function getFile(file) {
				var f = new File(file);
			    if (f.exists()) {
				    System.out.println("Using File: " + f);
					return f;
				}
			    return null;
			}
			
			function loadProps() {
				var baseprop = project.getProperty('basedir');
			    var basedir = new File(baseprop);
				var propfile=new File(basedir, 'build.properties');
			
				var props = new Properties();
				try {
					props.load(new FileReader(propfile));
				} catch (e) {
				}
				return props;
			}

			function saveProps(props) {
				var baseprop = project.getProperty('basedir');
			    var basedir = new File(baseprop);
				var propfile=new File(basedir, 'build.properties');
			
				var fw = new FileWriter(propfile);
				props.store(fw, "build defaults");
				fw.flush();
				fw.close();
			}

			function configure() {
				var baseprop = project.getProperty('basedir');
			    var basedir = new File(baseprop);
			
				var props = loadProps();
			
				var alllibs = new Array();
			    var sageFile = getFile(System.getProperty('sage.jar.provided', 'Sage.jar'));
			    if (sageFile==null) {
					alert('Phoenix needs to know where your Sage.jar is located.  Press ok to continue.', 'Configure');
					sageFile = selectFile("Select Sage.jar", props.getProperty('sage.jar', 'Sage.jar'));
				}
			    if (sageFile==null) {
				    alert('You must select Sage.jar');
					return;
				} else {
					alllibs.push(sageFile);
					props.setProperty("sage.jar", sageFile.getAbsolutePath());
				}
				
				var libdir = new File(basedir, 'lib');
				var files = libdir.listFiles();
				if (files==null) {
					alert('Configuration Error.  No library files in ' + libdir.getAbsolutePath());
					return;
				}
				for (var i=0;i<files.length;i++) {
					var f = files[i];
					if (!f.getName().contains('-javadoc') && !f.getName().contains('-sources') && f.getName().endsWith('.jar')) {
						alllibs.push(f);
					}
				}
				
				var cp = "";
				cp = 	"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
						"<classpath>\r\n" + 
						"   <classpathentry kind=\"src\" path=\"src/main/java\"/>\n" + 
						"   <classpathentry kind=\"src\" path=\"src/test/java\"/>\n" + 
						"   <classpathentry exported=\"true\" kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>\n";
			
				for (var i=0;i<alllibs.length;i++) {
					cp += "   <classpathentry exported=\"true\" kind=\"lib\" path=\""+alllibs[i]+"\"/>\n";
				}
			
				cp +=	"	<classpathentry kind=\"output\" path=\"bin\"/>\n" + 
						"</classpath>\n" 

			
				var cpfile=new File(basedir, ".classpath");
			    println('Creating classpath file ' + cpfile.getAbsolutePath());
				var os = new FileWriter(cpfile);
				os.write(cp,0,cp.length);
				os.flush();
				os.close();
			
				saveProps(props);
			
				alert("Your project is configured.  You will need to refresh (F5) your eclipse project for the changes to take effect.");
			}
			
			configure();
		]]></script>
		
		<echo message="Generating Phoenix API..."/>
		<antcall target="generate-phoenix-api"/>
	</target>
	
	<target name="init" depends="clean">
		<mkdir dir="${build.dir}/classes/" />
		<mkdir dir="${build.dir}/sage/" />
		<mkdir dir="${dist.dir}/packages/" />
		
		<copy includeemptydirs="false" todir="${build.dir}/classes/">
			<fileset dir="${src.dir}" excludes="**/*.launch, **/*.java" />
		</copy>
	</target>
	
	<target name="clean">
		<delete dir="target" />
	</target>
	
	<target name="build" depends="init">
		<javac debug="true" classpathref="project.class.path" source="1.5" target="1.5" srcdir="${src.dir}" destdir="${build.dir}/classes"/>
	</target>
	
	<target name="build-gwt">
		<delete dir="${build.dir}/classes/gwt"/>
		<mkdir dir="${build.dir}/classes/gwt"/>
		<mkdir dir="${build.dir}/classes/gwt/src"/>

		<copy toDir="${build.dir}/classes/gwt/src" failonerror="true">
			<fileset dir="${src.dir}">
				<include name="sagex/phoenix/metadata/MetadataException.java"/>
				<include name="sagex/phoenix/metadata/search/SearchQuery.java"/>
				<include name="sagex/phoenix/metadata/MediaType.java"/>
				<include name="sagex/phoenix/metadata/MediaArtifactType.java"/>
				<include name="sagex/phoenix/vfs/I*.java"/>
				<include name="sagex/phoenix/progress/I*.java"/>
				<include name="sagex/phoenix/metadata/I*.java"/>
				<include name="sagex/phoenix/metadata/proxy/SageProperty.java"/>
				<include name="sagex/phoenix/util/HasHints.java"/>
				<include name="sagex/phoenix/util/Hints.java"/>
				<include name="sagex/phoenix/configuration/Config.java"/>
			</fileset>
		</copy>

		<copy file="src/main/gwt/phoenix.gwt.xml" todir="${build.dir}/classes/gwt/" />
		<copy todir="${build.dir}/classes/gwt/src/">
			<fileset dir="src/main/gwt/src/" includes="**/**"/>
		</copy>
	</target>
	
	<target depends="init,build,build-gwt" name="jar" description="Builds the main JAR file">
		<echo message="${ant.project.name}: ${ant.file}" />
		<jar destfile="${target}/${jarname}">
			<fileset dir="${build.dir}/classes" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Specification-Title" value="Phoenix" />
				<attribute name="Specification-Version" value="${version}  ${TODAY}" />
				<attribute name="Specification-Vendor" value="Phoenix" />
				<attribute name="Implementation-Title" value="Phoenix" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="Phoenix" />
			</manifest>
		</jar>
	</target>
	
	<target name="javadoc" depends="jar" if="createJAVADOC">
		<mkdir dir="${build.dir}/javadoc/"/>
		<javadoc author="true" useexternalfile="true" destdir="${build.dir}/javadoc/" classpathref="project.class.path" failonerror="false" use="true" verbose="false" excludepackagenames="test" maxmemory="1024M">
			<fileset dir="${src.dir}" excludes="**/*.properties,**/test/**,**/*.jj,**/*.xml" includes="**/*.java"></fileset>
			<header><![CDATA[Phoenix API for SageTV Project ${version}]]></header>
			<bottom><![CDATA[Build - ${version} - ${TODAY}]]></bottom>
		</javadoc>
	</target>
	
	<target name="package" depends="jar,package-core,package-javadoc" description="Creates the Phoenix Package File (jar, javadoc, etc)"/>
	
	<target name="package-javadoc" depends="javadoc" if="createJAVADOC">
		<zip destfile="${target}/phoenix-javadoc-${version}.zip" whenempty="fail">
			<zipfileset dir="${build.dir}/javadoc/" prefix="phoenix-javadoc"/>
		</zip>
	</target>
	
	<target name="package-core">
		<mkdir dir="${build.dir}/sage/JARs"/>
		<copy file="${target}/${jarname}" todir="${build.dir}/sage/JARs"/>
		<copy todir="${build.dir}/sage/JARs">
			<fileset dir="lib" includes="*.jar" excludes="Sage.jar,easymock*,junit*,h2jaqu*,servlet-api*"/>
		</copy>

		<mkdir dir="${build.dir}/sage/STVs"/>
		<copy todir="${build.dir}/sage/STVs">
			<fileset dir="src/main/STVs" excludes="**/Themes/**,"/>
		</copy>
		
		<zip destfile="${target}/phoenix-${version}.zip">
			<fileset dir="${build.dir}/sage/"/>
		</zip>

		<zip destfile="${target}/phoenix-JarOnly-${DSTAMP}-${TSTAMP}.zip">
			<fileset file="${target}/${jarname}"/>
		</zip>
	</target>

	<target name="dist-plugins" description="Create Plugins for Sage7 (and builds jars)" depends="package, dist-plugin-api, dist-plugin-core"/>
	
	<target name="dist-plugin-api" description="Create the API Plugin (no dependency tasks)">
		<mkdir dir="${dist.dir}/packages/" />

		<zip destfile="${dist.dir}/packages/phoenix-api-${version}.zip">
			<zipfileset file="${target}/${jarname}" prefix="" />
		</zip>

		<copy tofile="${dist.dir}/packages/phoenix-api-${version}.xml" file="src/main/resources/plugin/plugin-api.xml"/>

		<checksum file="${dist.dir}/packages/phoenix-api-${version}.zip" property="md5.jar" />

		<tstamp>
			<format property="last-modified" pattern="yyyy.MM.dd" />
		</tstamp>

		<replace file="${dist.dir}/packages/phoenix-api-${version}.xml" summary="yes">
			<replacefilter token="@@last-modified@@" value="${last-modified}" />
			<replacefilter token="@@version@@" value="${version}" />
			<replacefilter token="@@jar-checksum@@" value="${md5.jar}" />
			<replacefilter token="@@system-checksum@@" value="${md5.system}" />
		</replace>

		<copy todir="${sage.home}/DeveloperPlugins/" failonerror="false">
			<fileset dir="${dist.dir}/packages/"/>
		</copy>
	</target>
	
	<target name="dist-plugin-core" description="Create the Core Plugin (no dependency tasks)">
		<mkdir dir="${dist.dir}/packages/" />

		<zip destfile="${dist.dir}/packages/phoenix-core-${version}.zip">
			<zipfileset dir="src/main/STVs/Phoenix/" prefix="STVs/Phoenix/">
				<exclude name="**/db/**"/>
				<exclude name="**/*Test*"/>
				<exclude name="**/Skins/**"/>
				<exclude name="**/Themes/**"/>
				<exclude name="**/Plugins/**"/>
				<exclude name="**/ext/**"/>
			</zipfileset>
		</zip>
		
		<copy tofile="${dist.dir}/packages/phoenix-core-${version}.xml" file="src/main/resources/plugin/plugin-core.xml"/>

		<checksum file="${dist.dir}/packages/phoenix-core-${version}.zip" property="md5.system" />

		<tstamp>
			<format property="last-modified" pattern="yyyy.MM.dd" />
		</tstamp>

		<replace file="${dist.dir}/packages/phoenix-core-${version}.xml" summary="yes">
			<replacefilter token="@@last-modified@@" value="${last-modified}" />
			<replacefilter token="@@version@@" value="${version}" />
			<replacefilter token="@@jar-checksum@@" value="${md5.jar}" />
			<replacefilter token="@@system-checksum@@" value="${md5.system}" />
		</replace>

		<copy todir="${sage.home}/DeveloperPlugins/" failonerror="false">
			<fileset dir="${dist.dir}/packages/"/>
		</copy>
	</target>
	
	<target name="publish-googlecode" description="Upload build to Google Code">
		<get dest="${user.home}/.ant/lib/ant-googlecode.jar" src="http://ant-googlecode.googlecode.com/files/ant-googlecode-0.0.2.jar" usetimestamp="true"/>
		<fail message="gc.username must be defined in ${gc.upload.settings}" unless="gc.username" />
		<fail message="gc.password must be defined in ${gc.upload.settings}" unless="gc.password" />
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
		</taskdef>
		<!--
		<gcupload targetfilename="phoenix-javadoc-${version}.zip"  filename="${target}/phoenix-javadoc-${version}.zip" username="${gc.username}" password="${gc.password}" projectname="sagephoenix" summary="Phoenix API JavaDoc ${version}" labels="Featured,QA-Snapshot,Type-Archive,OpSys-All"/>
		-->
		<gcupload targetfilename="phoenix-api-${version}.zip"  filename="${target}/dist/packages/phoenix-api-${version}.zip" username="${gc.username}" password="${gc.password}" projectname="sagephoenix" summary="Phoenix API ${version} (Sage7 Plugin)" labels="Featured,QA-Snapshot,Type-Archive,OpSys-All" />
		<gcupload targetfilename="phoenix-core-${version}.zip"  filename="${target}/dist/packages/phoenix-core-${version}.zip" username="${gc.username}" password="${gc.password}" projectname="sagephoenix" summary="Phoenix Core ${version} (Sage7 Plugin)" labels="Featured,QA-Snapshot,Type-Archive,OpSys-All" />
	</target>

	<target name="publish-googlecode-jar-only" description="Upload ONLY the phoenix.jar with TIMESTAMP to Google Code, usually for testing purposes">
		<get dest="${user.home}/.ant/lib/ant-googlecode.jar" src="http://ant-googlecode.googlecode.com/files/ant-googlecode-0.0.2.jar" usetimestamp="true"/>
		<!-- <available file="${gc.upload.settings}" property="gc.upload.enable" /> -->
		<!-- <fail message="${gc.upload.settings} file does not exist!" unless="gc.upload.enable" /> -->
		<!-- <property file="${gc.upload.settings}" /> -->
		<fail message="gc.username must be defined in ${gc.upload.settings}" unless="gc.username" />
		<fail message="gc.password must be defined in ${gc.upload.settings}" unless="gc.password" />
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
		</taskdef>
		
		<gcupload targetfilename="phoenix-JarOnly-${version}-${DSTAMP}-${TSTAMP}.zip"  filename="${target}/phoenix-JarOnly-${DSTAMP}-${TSTAMP}.zip" username="${gc.username}" password="${gc.password}" projectname="sagephoenix" summary="Phoenix JAR ${version}" labels="QA-Snapshot,Type-Archive,OpSys-All" />
	</target>
	
	<target name="notify-sagetv-phoenix-api" description="Notifies SageTV about the new phoenix-api plugin">
		<get dest="target/slugger.zip" src="http://sagetv-addons.googlecode.com/files/slugger-dev-tools-0.0.1.zip"/>
		<unzip dest="${user.home}/.ant/lib/" src="target/slugger.zip"/>
        <taskdef classname="com.google.code.sagetvaddons.dev.ant.task.SageTvPluginSubmitter" name="sagesubmit">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
        </taskdef>
        <sagesubmit name="Sean Stuckless" user="${sage.forumuser}" email="sean.stuckless@gmail.com" pluginid="phoenix-api" reqtype="UPGRADE" descriptor="${dist.dir}/packages/phoenix-api-${version}.xml" />
	</target>

	<target name="notify-sagetv-phoenix-core" description="Notifies SageTV about the new phoenix-core plugin">
		<get dest="target/slugger.zip" src="http://sagetv-addons.googlecode.com/files/slugger-dev-tools-0.0.1.zip"/>
		<unzip dest="${user.home}/.ant/lib/" src="target/slugger.zip"/>
        <taskdef classname="com.google.code.sagetvaddons.dev.ant.task.SageTvPluginSubmitter" name="sagesubmit">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
        </taskdef>
        <sagesubmit name="Sean Stuckless" user="${sage.forumuser}" email="sean.stuckless@gmail.com" pluginid="phoenix-core" reqtype="UPGRADE" descriptor="${dist.dir}/packages/phoenix-core-${version}.xml" />
	</target>

	
	<target name="generate-phoenix-api" description="Regenerates the Phoenix API">
		<get dest="${user.home}/.ant/lib/phoenix-api-generator-ant-task.jar" src="http://sagephoenix.googlecode.com/files/phoenix-api-generator-ant-task-v2.jar" usetimestamp="true"/>
		<taskdef classname="phoenix.apibuilder.ant.APIBuilderTask" name="phoenix-createapi">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
		</taskdef>
		<phoenix-createapi source="src/main/java" output="src/main/java/phoenix" debug="true" />
	</target>
	
	
	<target name="unittests" depends="build">
		<mkdir dir="${target}/testclasses"/>
		<mkdir dir="${target}/unittests"/>
		<javac debug="true" classpathref="project.class.path" source="1.5" target="1.5" srcdir="src/test/java" destdir="${target}/testclasses"/>
		<junit printsummary="yes" haltonfailure="yes" fork="true" dir="${basedir}">
		  <classpath>
		  		<pathelement path="${target}/testclasses"/>
				<pathelement location="target/build/classes" />
				<fileset dir="lib" includes="*.jar"/>
				<pathelement path="${sage.home}/Sage.jar"/>
		  </classpath>

		  <formatter type="xml"/>
			<test name="test.junit.TestMenus" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestOnlineVideos" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestMiscStuff" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestTaskManager" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestFanartLocations" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestUtilAPI" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestDateParsers" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestConfigurationMetadata" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestFormattedTitles" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestImageAPI" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestMetadata" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestKeypadRegexSearch" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestEDLCommercials" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestMediaResources" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestSkinAPI" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestTrailersVFS" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestTransformFactory" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestGetYearError" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestDynamicVariables" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestReplacements" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestRemoveAll" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestProgressMonitor" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestEvents" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestDownloadManager" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestUserProfiles" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestFanartDownloading" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestVFSBuilder" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestFilePatterns" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestSearchQuery" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestMetadataProviderFactory" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestMediaBrowser" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestDateTime" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestRetryTaskManager" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestFileMatchers" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestCustomFolders" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestPQL" haltonfailure="no" todir="${target}/unittests"/>
			<test name="test.junit.TestVideoThumbnails" haltonfailure="no" todir="${target}/unittests"/>
		</junit>		
	</target>
	
	<target name="full-publish" description="Does a full build and publish to Google Code, and will otify sagetv about the api" depends="dist-plugins,publish-googlecode,notify-sagetv-phoenix-api">
	</target>
</project>
