options {	STATIC = false ;}PARSER_BEGIN(PQLParser)package sagex.phoenix.db;import java.io.StringReader;import java.io.Reader;import sagex.phoenix.vfs.filters.IResourceFilter;import org.apache.log4j.Logger;public class PQLParser{  private PQL query = new PQL();  private static Logger log = Logger.getLogger(PQLParser.class);  public PQLParser(String s)  {    this ((Reader) (new StringReader(logQuery(s))));  }  private static String logQuery(String q)  {    log.info("Parsing PQL Query: " + q);    return q;  }  public PQL getQuery()  {    return query;  }  public IResourceFilter getFilter()  {    return query.getFilter();  }}PARSER_END(PQLParser)/**  And now, the actual parsing specifications...... *//** Skip these characters, they are considered "white space" **/SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN : /*RESERVED TOKENS FOR UQL */{  < AND : "and" >| < OR : "or" >| < LPAREN : "(" >| < RPAREN : ")" >| < EQUALS : "=" >| < GREATERTHAN : ">" >| < LESSTHAN : "<" >| < NOTEQUAL : "<>" >| < CONTAINS : "contains" >| < IS_NOT_NULL : "is not" >| < IS_NULL : "is" >}TOKEN : /* the keywords and comparators - QUOTEDVALUE accounts for escaped quotes as well */{< STRING : ([ "A"-"Z", "a"-"z", "0"-"9" ])+ >| < QUOTED_STRING : "\"" (~[ "\"" ])+ "\"" >| < SQUOTED_STRING : "'" (~[ "'" ])+ "'" >}/** 
 *  Top level
 */void parse() :{}{  expression() < EOF >}/**
 * An expression is defined to be a queryTerm followed by zero or more
 * query terms joined by either an AND or an OR.   If two query terms are joined with 
 * AND then both conditions must be met.  If two query terms are joined with an OR, then
 * one of the two conditions must be met.  
 */void expression() :{}{  queryTerm()  (    (      < AND >      {        query.and();      }    |       < OR >      {        query.or();      }    )    queryTerm()  )*}/**
 * Query terms may consist of a parenthetically separated expression or
 * may be a query criteria of the form queryName = something or queryName <> something.
 *
 */void queryTerm() :{	Token lhs, op, rhs;  }{  (lhs = < STRING >)  (    op = < EQUALS >  | op = < NOTEQUAL >  | op = < LESSTHAN >  | op = < GREATERTHAN >  | op = < CONTAINS >  | op = < IS_NOT_NULL >  | op = < IS_NULL >  )  (   rhs = < STRING >  | rhs = < QUOTED_STRING >  {	rhs.image=rhs.image.substring(1, rhs.image.length()-1);      }  | rhs = < SQUOTED_STRING >  {	rhs.image=rhs.image.substring(1, rhs.image.length()-1);      }  )  {    query.field(lhs.image, op.image, rhs.image);  }|   < LPAREN >  {    query.begingroup();  }   expression() < RPAREN >   {	query.endgroup();   }}
